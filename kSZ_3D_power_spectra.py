import numpy as np
import pyccl as ccl
import HaloProfiles as hp
import matplotlib.pyplot as plt
from scipy.special import erf

#%%
# Functions to compute the integrals

#%%

def P_perp_1(k, pk_mm, pk_eg, a, aHf):

    mu_vals = np.linspace(-0.99, 0.99, 128)
    lk_vals = np.log(np.logspace(-4, 1, 128))

    def integrand2(mu, kp):
        q = np.sqrt(k**2 + kp**2 - 2*k*kp*mu)
        return (1-mu**2) * pk_eg(q, a, cosmo)

    def integrand1(lkp):
        kp = np.exp(lkp)
        integrand = integrand2(mu_vals, kp)
        integral = np.trapz(integrand, mu_vals)
        return kp * integral * pk_mm(kp, a, cosmo)

    integrand = np.array([integrand1(lk) for lk in lk_vals])
    integral = np.trapz(integrand, lk_vals)
    
    return integral * aHf**2 / (2*np.pi)**2


def P_perp_2(k, pk_em, pk_gm, a, aHf):

    mu_vals = np.linspace(-0.99, 0.99, 128)
    lk_vals = np.log(np.logspace(-4, 1, 128))
    
    def integrand2(mu, kp):
        q = np.sqrt(k**2 + kp**2 - 2*k*kp*mu)
        return -(1-mu**2) * pk_gm(q, a) / q**2
    
    def integrand1(lkp):
        kp = np.exp(lkp)
        integrand = integrand2(mu_vals, kp)
        integral = np.trapz(integrand, mu_vals)
        return kp**3 * integral * pk_em(kp, a)

    integrand = np.array([integrand1(lk) for lk in lk_vals])
    integral = np.trapz(integrand, lk_vals)
    
    return integral * aHf**2 / (2*np.pi)**2
   

def P_par_1(k, pk_mm, pk_eg, a, aHf):

    mu_vals = np.linspace(-0.99, 0.99, 128)
    lk_vals = np.log(np.logspace(-4, 1, 128))

    def integrand2(mu, kp):
        q = np.sqrt(k**2 + kp**2 - 2*k*kp*mu)
        return mu**2 * pk_eg(q, a)

    def integrand1(lkp):
        kp = np.exp(lkp)
        integrand = integrand2(mu_vals, kp)
        integral = np.trapz(integrand, mu_vals)
        return kp * integral * pk_mm(kp, a)

    integrand = np.array([integrand1(lk) for lk in lk_vals])
    integral = np.trapz(integrand, lk_vals)
    
    return integral * aHf**2 / (2*np.pi)**2


def P_par_2(k, pk_em, pk_gm, a, aHf):

    mu_vals = np.linspace(-0.99, 0.99, 128)
    lk_vals = np.log(np.logspace(-4, 1, 128))
    
    def integrand2(mu, kp):
        q = np.sqrt(k**2 + kp**2 - 2*k*kp*mu)
        return mu * (k-kp*mu) * pk_gm(q, a) / q**2
    
    def integrand1(lkp):
        kp = np.exp(lkp)
        integrand = integrand2(mu_vals, kp)
        integral = np.trapz(integrand, mu_vals)
        return kp**2 * integral * pk_em(kp, a)

    integrand = np.array([integrand1(lk) for lk in lk_vals])
    integral = np.trapz(integrand, lk_vals)
    
    return integral * aHf**2 / (2*np.pi)**2


#%%
# Cosmology

#%%

COSMO_P18 = {"Omega_c": 0.26066676,
             "Omega_b": 0.048974682,
             "h": 0.6766,
             "n_s": 0.9665,
             "sigma8": 0.8102,
             "matter_power_spectrum": "halofit"}
             
cosmo = ccl.Cosmology(**COSMO_P18)
cosmo.compute_growth()

k_vals = np.logspace(-3, 1, 128)
lk_arr = np.log(k_vals)
a_arr = np.linspace(0.1, 1, 32)

log10M = np.linspace(10, 15, 1000)
M = 10**log10M

z = 0.55
a = 1/(1+z)
H = cosmo['h'] * ccl.h_over_h0(cosmo, a) / ccl.physical_constants.CLIGHT_HMPC
f = cosmo.growth_rate(a)
aHf = a * H * f

plt.rcParams.update({
    "mathtext.fontset": "stix",
    "font.family": "serif",
    "font.size": 12})

#%%
# Overdensities

#%%

# Halo mass definition
hmd_200m = ccl.halos.MassDef200m

# Concentration-mass relation
cM = ccl.halos.ConcentrationDuffy08(mass_def=hmd_200m)

# Mass function
nM = ccl.halos.MassFuncTinker08(mass_def=hmd_200m)

# Halo bias
bM = ccl.halos.HaloBiasTinker10(mass_def=hmd_200m)

# Matter overdensity 
pM = ccl.halos.HaloProfileNFW(mass_def=hmd_200m, concentration=cM, fourier_analytic=True)

# Galaxy overdensity
pG = ccl.halos.HaloProfileHOD(mass_def=hmd_200m, concentration=cM, log10Mmin_0=12.89, log10M0_0=12.92, log10M1_0=13.95, alpha_0=1.1, bg_0=2.04)

# Halo model integral calculator
hmc = ccl.halos.HMCalculator(mass_function=nM, halo_bias=bM, mass_def=hmd_200m, log10M_max=15., log10M_min=10., nM=32)

# Gas density profile
profile_parameters = {"lMc": 14.0, "beta": 0.6, "eta_b": 0.5, "A_star": 0.03}
pGas = hp.HaloProfileDensityHE_withFT(mass_def=hmd_200m, concentration=cM, kind="rho_gas", **profile_parameters)
pGas.update_precision_fftlog(padding_lo_fftlog=1e-2, padding_hi_fftlog=1e2, n_per_decade=300, plaw_fourier=-2.0)

#%%
# Cross-correlations

#%%

# Matter-matter
pk_mm = ccl.halos.halomod_Pk2D(cosmo, hmc, pM, lk_arr=lk_arr, a_arr=a_arr)

# Galaxy-matter
pk_gm = ccl.halos.halomod_Pk2D(cosmo, hmc, pG, prof2=pM, lk_arr=lk_arr, a_arr=a_arr)

# Electron-matter
pk_em = ccl.halos.halomod_Pk2D(cosmo, hmc, pGas, prof2=pM, lk_arr=lk_arr, a_arr=a_arr)

# Electron-galaxy
pk_eg = ccl.halos.halomod_Pk2D(cosmo, hmc, pGas, prof2=pG, lk_arr=lk_arr, a_arr=a_arr)

# Electron-galaxy one-halo term only
pk_eg_1h = ccl.halos.halomod_Pk2D(cosmo, hmc, pGas, prof2=pG, lk_arr=lk_arr, a_arr=a_arr, get_2h=False)

# Electron-electron
pk_ee = ccl.halos.halomod_Pk2D(cosmo, hmc, pGas, prof2=pGas, lk_arr=lk_arr, a_arr=a_arr)

# Galaxy-galaxy
pk_gg = ccl.halos.halomod_Pk2D(cosmo, hmc, pG, prof2=pG, lk_arr=lk_arr, a_arr=a_arr)

# Plot the different contributions
plt.plot(k_vals, pk_mm(k_vals, a), label=r'm-m', color="tab:blue")
plt.plot(k_vals, pk_gm(k_vals, a), label=r'g-m', color="tab:red")
plt.plot(k_vals, pk_em(k_vals, a), label=r'e-m', color="tab:cyan")
plt.plot(k_vals, pk_eg(k_vals, a), label=r'e-g', color="tab:purple")
plt.plot(k_vals, pk_ee(k_vals, a), label=r'e-e', color="tab:pink")
plt.plot(k_vals, pk_gg(k_vals, a), label=r'g-g', color="tab:green")
plt.loglog()
plt.xlim(1e-3, 1e1)
plt.xlabel(r'$k$', fontsize=20)
plt.ylabel(r'$P(k)$', fontsize=20)
plt.legend(fontsize=12, frameon=False)
plt.tick_params(which='both', direction='in', width=1, length=3)
#plt.savefig('kSZ_power_spectra_test_plot.pdf', format="pdf", bbox_inches="tight")
plt.show()

#%%
# 3D power spectra calculations

#%%

# Perpendicular mode
P_of_k_perp_1 = np.array([P_perp_1(k, pk_mm, pk_eg, a, aHf) for k in k_vals])
P_of_k_perp_2 = np.array([P_perp_2(k, pk_em, pk_gm, a, aHf) for k in k_vals])
P_of_k_perp_T = P_of_k_perp_1 + P_of_k_perp_2

# Parallel mode
P_of_k_par_1 = np.array([P_par_1(k, pk_mm, pk_eg, a, aHf) for k in k_vals])
P_of_k_par_2 = np.array([P_par_2(k, pk_em, pk_gm, a, aHf) for k in k_vals])
P_mm = aHf**2 * pk_mm(k_vals, a) / ((2 * np.pi)**3 * k_vals**2)
P_of_k_par_T = P_of_k_par_1 + P_of_k_par_2 # + P_mm

#%%

# Contributions from the bispectra and trispectra
P_T_4h_perp_vals= [np.float64(-7.203464751484216e-06), np.float64(-5.7067538883843824e-06), np.float64(-5.472405724350699e-06), np.float64(-5.213591532965721e-06), np.float64(-4.930317290848859e-06), np.float64(-4.621826040498523e-06), np.float64(-4.2864768892701526e-06), np.float64(-3.9237587965323565e-06), np.float64(-3.5294837371217343e-06), np.float64(-3.1085450954019245e-06), np.float64(-2.6565055696857724e-06), np.float64(-2.1735537466343777e-06), np.float64(-1.6580129530679487e-06), np.float64(-1.1104378597367306e-06), np.float64(-5.304723830944471e-07), np.float64(8.114294594088589e-08), np.float64(7.248948247555021e-07), np.float64(1.3994768879296172e-06), np.float64(2.1114729973716868e-06), np.float64(2.8409486762551362e-06), np.float64(3.5919305139210453e-06), np.float64(4.360910724431833e-06), np.float64(5.141872643766284e-06), np.float64(5.936746261148497e-06), np.float64(6.7233802907227564e-06), np.float64(7.503727950933803e-06), np.float64(8.2672064727978e-06), np.float64(9.0018190584575e-06), np.float64(9.687649272246492e-06), np.float64(1.0311650445379507e-05), np.float64(1.0869692350013253e-05), np.float64(1.1339269601798368e-05), np.float64(1.1732274192901684e-05), np.float64(1.2033896822262906e-05), np.float64(1.2237261559783755e-05), np.float64(1.2311972224950943e-05), np.float64(1.2267709309094856e-05), np.float64(1.2106368812800721e-05), np.float64(1.1848664863480247e-05), np.float64(1.1522474935430247e-05), np.float64(1.1150032266526389e-05), np.float64(1.0716046278531043e-05), np.float64(1.0189183956111537e-05), np.float64(9.618953924853044e-06), np.float64(9.011500238648682e-06), np.float64(8.442379355291473e-06), np.float64(7.935229392130558e-06), np.float64(7.501197858561677e-06), np.float64(7.051761738986145e-06), np.float64(6.529784269417755e-06), np.float64(5.956856926937488e-06), np.float64(5.3489427693849224e-06), np.float64(4.780106314561275e-06), np.float64(4.3003328443425506e-06), np.float64(3.898483904610495e-06), np.float64(3.4401563666821127e-06), np.float64(2.928115157591513e-06), np.float64(2.4415451266193986e-06), np.float64(2.03415952581533e-06), np.float64(1.7436676438662532e-06), np.float64(1.6032339750002785e-06), np.float64(1.5001074364640365e-06), np.float64(1.2844291311263217e-06), np.float64(1.025211522173256e-06), np.float64(7.995628696153652e-07), np.float64(6.279522048630457e-07), np.float64(5.173774714186038e-07), np.float64(4.843792381143517e-07), np.float64(4.367455533077555e-07), np.float64(3.510238473354614e-07), np.float64(2.795711092007742e-07), np.float64(2.174418799487736e-07), np.float64(1.6245283102816533e-07), np.float64(1.3256104661993902e-07), np.float64(1.3026786787845144e-07), np.float64(1.142681184966123e-07), np.float64(9.108867062371734e-08), np.float64(7.036111352544435e-08), np.float64(5.438451494278402e-08), np.float64(4.089008016584974e-08), np.float64(3.6324717227650926e-08), np.float64(3.5987129523338355e-08), np.float64(2.9631256784120384e-08), np.float64(2.3731131156044944e-08), np.float64(1.8804162920698525e-08), np.float64(1.4689372681941453e-08), np.float64(1.1702792104794811e-08), np.float64(1.0701376846646039e-08), np.float64(9.827232282933552e-09), np.float64(7.914374120738021e-09), np.float64(6.339805372081012e-09), np.float64(5.112750646895981e-09), np.float64(3.980647874713243e-09), np.float64(3.220786461438484e-09), np.float64(2.8689224259018308e-09), np.float64(2.4111353624962773e-09), np.float64(1.9042312046741277e-09), np.float64(1.5302445074591695e-09), np.float64(1.1997664187882932e-09), np.float64(9.098584436554879e-10), np.float64(7.09965846622967e-10), np.float64(6.078859095116526e-10), np.float64(4.989954135593855e-10), np.float64(4.0263087846965003e-10), np.float64(3.184019465863243e-10), np.float64(2.352578213863686e-10), np.float64(1.6711259209368221e-10), np.float64(1.2432094427632433e-10), np.float64(1.0321062522683034e-10), np.float64(8.520713542949185e-11), np.float64(6.676457417223497e-11), np.float64(4.9509043116267656e-11), np.float64(3.468802159657135e-11), np.float64(2.2860068028898634e-11), np.float64(1.6790072281080083e-11), np.float64(1.4290029725680141e-11), np.float64(1.1681871536928509e-11), np.float64(8.976920690218291e-12), np.float64(6.5989710691829395e-12), np.float64(4.24793824282761e-12), np.float64(2.6446039008488885e-12), np.float64(2.0593476598495574e-12), np.float64(1.8369468844626364e-12), np.float64(1.4852942647976853e-12), np.float64(1.1730206752582734e-12), np.float64(9.342043143091147e-13), np.float64(7.55134933057561e-13), np.float64(1.0972818008493456e-12)]
P_T_1h_vals= [np.float64(1.988672438512797e-09), np.float64(1.988679558598146e-09), np.float64(1.988688174381673e-09), np.float64(1.988698351544852e-09), np.float64(1.988710196178235e-09), np.float64(1.988723956358652e-09), np.float64(1.988739960004228e-09), np.float64(1.988759251337942e-09), np.float64(1.988781498993468e-09), np.float64(1.9888123580631682e-09), np.float64(1.988849225932354e-09), np.float64(1.988888961327715e-09), np.float64(1.9889315208969118e-09), np.float64(1.9889774078074942e-09), np.float64(1.9890271665885435e-09), np.float64(1.989081391939215e-09), np.float64(1.9891407372433697e-09), np.float64(1.989205934570413e-09), np.float64(1.9892783143305094e-09), np.float64(1.9893678712295146e-09), np.float64(1.9894679200654684e-09), np.float64(1.9895795082491893e-09), np.float64(1.9897040321436293e-09), np.float64(1.989843419699105e-09), np.float64(1.9900003593909787e-09), np.float64(1.99017850498688e-09), np.float64(1.9903825052554472e-09), np.float64(1.9906173488889147e-09), np.float64(1.990886260785432e-09), np.float64(1.9911887728423313e-09), np.float64(1.9915209060698257e-09), np.float64(1.99187223730986e-09), np.float64(1.99222696829378e-09), np.float64(1.9925690990857574e-09), np.float64(1.9928853442444404e-09), np.float64(1.9931658660205164e-09), np.float64(1.993404783660761e-09), np.float64(1.993601302238241e-09), np.float64(1.9937627079291784e-09), np.float64(1.9939115611414974e-09), np.float64(1.994101576540897e-09), np.float64(1.9944446970894176e-09), np.float64(1.9951220412404727e-09), np.float64(1.9962722763705763e-09), np.float64(1.9977813233957114e-09), np.float64(1.9993496231041252e-09), np.float64(2.0007331385934814e-09), np.float64(2.0018035849521526e-09), np.float64(2.00250439503413e-09), np.float64(2.00280651915183e-09), np.float64(2.0026901562080355e-09), np.float64(2.002127536302328e-09), np.float64(2.0010762567649985e-09), np.float64(1.999488893482956e-09), np.float64(1.9973883072353924e-09), np.float64(1.9951334087371157e-09), np.float64(1.9939490218883594e-09), np.float64(1.9954658259730372e-09), np.float64(1.9989010398549467e-09), np.float64(2.0019592493182834e-09), np.float64(2.0037467007011634e-09), np.float64(2.004275661428936e-09), np.float64(2.0036018880343495e-09), np.float64(2.001808988049076e-09), np.float64(1.9989050571001844e-09), np.float64(1.994845471919079e-09), np.float64(1.9895919167607746e-09), np.float64(1.9831627872461472e-09), np.float64(1.9758014314487288e-09), np.float64(1.9682695018429407e-09), np.float64(1.963257907634901e-09), np.float64(1.9656377702809015e-09), np.float64(1.974028275063523e-09), np.float64(1.981986903739323e-09), np.float64(1.9866845760357317e-09), np.float64(1.987617663362403e-09), np.float64(1.9850553579956336e-09), np.float64(1.9793262927466084e-09), np.float64(1.969249158106745e-09), np.float64(1.95318826498794e-09), np.float64(1.92885854866487e-09), np.float64(1.893159337450057e-09), np.float64(1.8434953900406105e-09), np.float64(1.7846556350897683e-09), np.float64(1.7292249088452642e-09), np.float64(1.694210311463368e-09), np.float64(1.6792223618521406e-09), np.float64(1.662536282889518e-09), np.float64(1.6273183771994956e-09), np.float64(1.578858863262266e-09), np.float64(1.5300802657533409e-09), np.float64(1.4875012402333551e-09), np.float64(1.450961904692021e-09), np.float64(1.4210430679792334e-09), np.float64(1.3976950593662251e-09), np.float64(1.3799635205166535e-09), np.float64(1.364812011194991e-09), np.float64(1.3438635310469443e-09), np.float64(1.3038086775810437e-09), np.float64(1.2227388141652855e-09), np.float64(1.1019857908644084e-09), np.float64(9.701775546376943e-10), np.float64(8.499429261833426e-10), np.float64(7.50781227031502e-10), np.float64(6.716150637480278e-10), np.float64(6.080492279665334e-10), np.float64(5.560239054201817e-10), np.float64(5.126243284538202e-10), np.float64(4.762070724938272e-10), np.float64(4.4618151856296637e-10), np.float64(4.2285763439761915e-10), np.float64(4.054206761067395e-10), np.float64(3.852600546207604e-10), np.float64(3.405432921533537e-10), np.float64(2.6920985642557115e-10), np.float64(2.0188994695069705e-10), np.float64(1.5230508278694107e-10), np.float64(1.17106448597698e-10), np.float64(9.187528895453483e-11), np.float64(7.398954837843242e-11), np.float64(6.175889894312523e-11), np.float64(5.3988796853222354e-11), np.float64(4.986276985161867e-11), np.float64(4.8821041943898814e-11), np.float64(5.0339740119445297e-11), np.float64(5.3424008087864115e-11), np.float64(5.5526287525142924e-11), np.float64(5.177353966403365e-11)]
P_T_4h_vals= [np.float64(-18201.543715034823), np.float64(94.05472487237674), np.float64(74.880606092869), np.float64(59.59503324912251), np.float64(47.40068721273524), np.float64(37.678376173298254), np.float64(29.904814587104617), np.float64(23.731049317023196), np.float64(18.814681267657058), np.float64(15.124074845526904), np.float64(11.91536324621858), np.float64(9.390654608097066), np.float64(7.381539172543622), np.float64(5.784595378621586), np.float64(4.519879481546923), np.float64(3.51966244685011), np.float64(2.729876176019746), np.float64(2.1054944795960875), np.float64(1.5465049827602135), np.float64(1.1493457518362251), np.float64(0.8383881200930865), np.float64(0.5964460627874594), np.float64(0.40796185012127356), np.float64(0.26112758402957825), np.float64(0.14167706233962243), np.float64(0.04758965900679862), np.float64(-0.028196470698684833), np.float64(-0.09408201253231714), np.float64(-0.14944066292125158), np.float64(-0.22856897108269086), np.float64(-0.2966820828607988), np.float64(-0.3469083051491589), np.float64(-0.37945520776480807), np.float64(-0.3941544605226034), np.float64(-0.39204993002350236), np.float64(-0.37553782286327003), np.float64(-0.3478391840537507), np.float64(-0.3115083702995155), np.float64(-0.27029280610759554), np.float64(-0.2253869649092135), np.float64(-0.17990330938094176), np.float64(-0.1383474522179663), np.float64(-0.1032343994425232), np.float64(-0.1006145660368211), np.float64(-0.10538556992168623), np.float64(-0.10658579382432735), np.float64(-0.10199627963524235), np.float64(-0.0923286815591654), np.float64(-0.07978015537639926), np.float64(-0.06686084569516036), np.float64(-0.05539919987894916), np.float64(-0.046126063781771275), np.float64(-0.03893278365004596), np.float64(-0.03306435205195011), np.float64(-0.02739976782916316), np.float64(-0.020770577944018393), np.float64(-0.013404012734054256), np.float64(-0.012141984876945929), np.float64(-0.012015069009363258), np.float64(-0.009849719757057), np.float64(-0.006937509655187171), np.float64(-0.004571791068760858), np.float64(-0.003054408198110356), np.float64(-0.002148234856685034), np.float64(-0.0015580570720725305), np.float64(-0.0011220736165171055), np.float64(-0.0008167031024247945), np.float64(-0.0006345417329181831), np.float64(-0.0005360373889988361), np.float64(-0.0004642734980800211), np.float64(-0.0003387346808119666), np.float64(-0.000280291273111879), np.float64(-0.00022686248882707708), np.float64(-0.00015115629563768588), np.float64(-8.833368838803117e-05), np.float64(-4.55952583376007e-05), np.float64(-2.6459958712028244e-05), np.float64(-1.4512900530063897e-05), np.float64(-8.05168637089911e-06), np.float64(-4.484019216636087e-06), np.float64(-2.5760843402223916e-06), np.float64(-1.2787094145655753e-06), np.float64(-6.20807348691766e-07), np.float64(-4.7682451509076193e-07), np.float64(-5.803532871616955e-07), np.float64(-6.049702228556332e-07), np.float64(-4.046917068718119e-07), np.float64(-1.1504308033126635e-07), np.float64(-1.2676183844543151e-08), np.float64(1.7624827724907117e-08), np.float64(3.449647893485851e-08), np.float64(3.1324518428380384e-08), np.float64(2.8188121964040252e-08), np.float64(2.6637645501636585e-08), np.float64(2.204948575538945e-08), np.float64(2.532628711214032e-08), np.float64(2.9396618422489326e-08), np.float64(3.6917990077808245e-08), np.float64(3.537888401311916e-08), np.float64(2.7155293697189816e-08), np.float64(1.7655873396230335e-08), np.float64(8.710732522608289e-09), np.float64(3.720681385456975e-09), np.float64(1.63516890515717e-09), np.float64(8.824985255554513e-10), np.float64(4.6497982872668216e-10), np.float64(2.722539708497908e-10), np.float64(1.930388169222144e-10), np.float64(1.793179428304001e-10), np.float64(1.2347231534572617e-10), np.float64(1.3228776212293437e-10), np.float64(1.8495180650316915e-10), np.float64(2.220711621947641e-10), np.float64(1.845255580777316e-10), np.float64(1.0900110344964246e-10), np.float64(4.3592100666137206e-11), np.float64(1.5141776256627922e-11), np.float64(5.4440074603695225e-12), np.float64(2.41078892546079e-12), np.float64(1.083609959980074e-12), np.float64(5.629875089769865e-13), np.float64(3.839243148540562e-13), np.float64(4.305026680695881e-13), np.float64(3.7150203334192835e-13), np.float64(5.856439628798403e-13), np.float64(1.1193838856489974e-12), np.float64(1.4629251804287033e-12), np.float64(4.0548268042324937e-13)]
P_B_mme_3h_vals= [np.float64(-0.0001616022006716969), np.float64(-0.00014917714018133874), np.float64(-0.0001376311697717571), np.float64(-0.0001269012070743435), np.float64(-0.00011693514627617417), np.float64(-0.00010767961595884075), np.float64(-9.90799761207784e-05), np.float64(-9.108257355146754e-05), np.float64(-8.364928878018851e-05), np.float64(-7.674808457032441e-05), np.float64(-7.034088370824804e-05), np.float64(-6.439104825831546e-05), np.float64(-5.886413657809051e-05), np.float64(-5.37391023349994e-05), np.float64(-4.899088069575076e-05), np.float64(-4.458612689404615e-05), np.float64(-4.049688336210338e-05), np.float64(-3.6710393570895315e-05), np.float64(-3.3205321354384426e-05), np.float64(-2.9967966378059958e-05), np.float64(-2.697366309372076e-05), np.float64(-2.420009691694643e-05), np.float64(-2.162922259473573e-05), np.float64(-1.9268637744880227e-05), np.float64(-1.7100137681802776e-05), np.float64(-1.5104916787455474e-05), np.float64(-1.3266066140502768e-05), np.float64(-1.15941629983721e-05), np.float64(-1.007544462123273e-05), np.float64(-8.680336424792834e-06), np.float64(-7.423197902423735e-06), np.float64(-6.2773377962306084e-06), np.float64(-5.254071187156335e-06), np.float64(-4.3403999813621335e-06), np.float64(-3.535236477334076e-06), np.float64(-2.819602068459084e-06), np.float64(-2.2001083908068565e-06), np.float64(-1.6618764220184138e-06), np.float64(-1.203557481302177e-06), np.float64(-8.113660664648118e-07), np.float64(-4.736171656796681e-07), np.float64(-1.8537339190729428e-07), np.float64(6.405019943097948e-08), np.float64(2.9008258287775193e-07), np.float64(4.911788180268911e-07), np.float64(6.658381346466264e-07), np.float64(8.090968564129448e-07), np.float64(9.169448569894698e-07), np.float64(9.8873619151623e-07), np.float64(1.0270131491097602e-06), np.float64(1.0337496682633348e-06), np.float64(1.012304950827114e-06), np.float64(9.581087690359846e-07), np.float64(8.610610883534699e-07), np.float64(7.161620354746359e-07), np.float64(5.47702355005875e-07), np.float64(4.3705344893693853e-07), np.float64(4.632492321465719e-07), np.float64(5.72570122298114e-07), np.float64(6.376774867987735e-07), np.float64(6.208685890703391e-07), np.float64(5.585428277047604e-07), np.float64(4.939958566408942e-07), np.float64(4.515202007667575e-07), np.float64(4.297734284465548e-07), np.float64(4.116567688981431e-07), np.float64(3.8644376982510964e-07), np.float64(3.4813364763582933e-07), np.float64(2.958422732557033e-07), np.float64(2.3284579142907664e-07), np.float64(1.6463597878525787e-07), np.float64(1.3680929920630005e-07), np.float64(1.444842485152419e-07), np.float64(1.4260037199654937e-07), np.float64(1.1725384346492622e-07), np.float64(8.532905412641038e-08), np.float64(7.102262908500312e-08), np.float64(5.5456469864293643e-08), np.float64(4.677432651427212e-08), np.float64(4.0261437499012205e-08), np.float64(3.6918759393721495e-08), np.float64(3.4612083469884535e-08), np.float64(3.3920369290928756e-08), np.float64(3.027022911727488e-08), np.float64(2.1367146877268485e-08), np.float64(1.63144621369382e-08), np.float64(1.6263619017993984e-08), np.float64(1.155851865509894e-08), np.float64(7.683771927963265e-09), np.float64(4.873415283863851e-09), np.float64(3.168461888117589e-09), np.float64(2.173509864016683e-09), np.float64(1.6018107663218541e-09), np.float64(1.2796099210484667e-09), np.float64(1.1233566426091002e-09), np.float64(1.0895008981128e-09), np.float64(1.139531083262398e-09), np.float64(1.1935995579144258e-09), np.float64(9.956631831019051e-10), np.float64(7.344336953352389e-10), np.float64(6.164786036484029e-10), np.float64(3.76382043421832e-10), np.float64(1.9806728501012262e-10), np.float64(1.0372518601364393e-10), np.float64(5.7203849929773206e-11), np.float64(3.3947985762733307e-11), np.float64(2.2012175074022437e-11), np.float64(1.5940783543925822e-11), np.float64(1.32540722435072e-11), np.float64(1.2898623783909562e-11), np.float64(1.4502646106869747e-11), np.float64(1.7143375422022978e-11), np.float64(1.6654308548718525e-11), np.float64(1.2136064056446059e-11), np.float64(9.28359937709871e-12), np.float64(4.8838697765241624e-12), np.float64(2.1251965060115515e-12), np.float64(9.259580291342056e-13), np.float64(4.2808310933446785e-13), np.float64(2.141160460396108e-13), np.float64(1.1787953904166585e-13), np.float64(7.37749861543386e-14), np.float64(5.548908250615601e-14), np.float64(5.270022446164336e-14), np.float64(6.270421072254257e-14), np.float64(8.34848010945833e-14), np.float64(9.351560221858774e-14), np.float64(3.2826651536057347e-14)]
P_B_mme_1h_vals= [np.float64(1.3116253904937613e-10), np.float64(1.3116285290513554e-10), np.float64(1.3116323672969755e-10), np.float64(1.311636895496104e-10), np.float64(1.311642123558949e-10), np.float64(1.3116481582547461e-10), np.float64(1.3116551481238026e-10), np.float64(1.3116637075240957e-10), np.float64(1.311673519577573e-10), np.float64(1.3116884403461844e-10), np.float64(1.3117069652156642e-10), np.float64(1.3117268206589376e-10), np.float64(1.3117478404424038e-10), np.float64(1.3117702119353303e-10), np.float64(1.311794129274782e-10), np.float64(1.311819786193436e-10), np.float64(1.3118473739508443e-10), np.float64(1.3118770904357464e-10), np.float64(1.3119094712237333e-10), np.float64(1.3119502736131443e-10), np.float64(1.3119939181840191e-10), np.float64(1.312040468707044e-10), np.float64(1.3120900675092708e-10), np.float64(1.31214294259108e-10), np.float64(1.3121994695506834e-10), np.float64(1.3122603708609715e-10), np.float64(1.312327186439009e-10), np.float64(1.3124031636248428e-10), np.float64(1.3124936889668098e-10), np.float64(1.3126018140596033e-10), np.float64(1.3127205694539263e-10), np.float64(1.312837480991526e-10), np.float64(1.3129424937008504e-10), np.float64(1.3130286594712045e-10), np.float64(1.313090891984296e-10), np.float64(1.3131255149859308e-10), np.float64(1.3131308009143347e-10), np.float64(1.3131080802773584e-10), np.float64(1.3130637438432057e-10), np.float64(1.3130115184995672e-10), np.float64(1.3129746381543255e-10), np.float64(1.3129911849671508e-10), np.float64(1.3131238266786922e-10), np.float64(1.3134273732372332e-10), np.float64(1.3138520257610184e-10), np.float64(1.3142839458780232e-10), np.float64(1.3146279849138383e-10), np.float64(1.3148119076723527e-10), np.float64(1.3147923684546732e-10), np.float64(1.314559165800195e-10), np.float64(1.3141169724961137e-10), np.float64(1.3134674479250308e-10), np.float64(1.3126038790038226e-10), np.float64(1.3115135093944947e-10), np.float64(1.3101994338382186e-10), np.float64(1.308815100892206e-10), np.float64(1.3079841307886649e-10), np.float64(1.3085419131430903e-10), np.float64(1.3101455061499185e-10), np.float64(1.3117032073283684e-10), np.float64(1.3128252961567675e-10), np.float64(1.3135398804975537e-10), np.float64(1.313882586368902e-10), np.float64(1.3138657443339712e-10), np.float64(1.313445999346485e-10), np.float64(1.3125342749122486e-10), np.float64(1.3110591245956926e-10), np.float64(1.3089265005649366e-10), np.float64(1.306068383594459e-10), np.float64(1.3026817245492893e-10), np.float64(1.2999675187944236e-10), np.float64(1.3002090855115953e-10), np.float64(1.3028637225552852e-10), np.float64(1.3050643620265732e-10), np.float64(1.3056833362671063e-10), np.float64(1.3047224902209334e-10), np.float64(1.3024756459762401e-10), np.float64(1.2992660189830618e-10), np.float64(1.295191371425846e-10), np.float64(1.2902929899465332e-10), np.float64(1.2843820347414006e-10), np.float64(1.2769068582947064e-10), np.float64(1.2670282872999272e-10), np.float64(1.254905462173037e-10), np.float64(1.2424000226092354e-10), np.float64(1.2329034797487546e-10), np.float64(1.2264943867485112e-10), np.float64(1.218848533461356e-10), np.float64(1.2073675422288843e-10), np.float64(1.194212352027031e-10), np.float64(1.1813986513473085e-10), np.float64(1.16810792387466e-10), np.float64(1.1550678648110878e-10), np.float64(1.1425729692918946e-10), np.float64(1.1298787461674044e-10), np.float64(1.1171614431036087e-10), np.float64(1.1015020439802868e-10), np.float64(1.0834047502708777e-10), np.float64(1.0572418331642466e-10), np.float64(1.0226670625029301e-10), np.float64(9.802741796921833e-11), np.float64(9.321940687101993e-11), np.float64(8.856763196844368e-11), np.float64(8.433272677759341e-11), np.float64(8.067572296595297e-11), np.float64(7.760646586956417e-11), np.float64(7.514836488978838e-11), np.float64(7.324260463253135e-11), np.float64(7.185946370523768e-11), np.float64(7.093047642916261e-11), np.float64(7.034201948187936e-11), np.float64(6.948373213130673e-11), np.float64(6.747053065847079e-11), np.float64(6.285179773801581e-11), np.float64(5.56875648422934e-11), np.float64(4.768838738344428e-11), np.float64(4.056874900592351e-11), np.float64(3.502509607197787e-11), np.float64(3.103898689827255e-11), np.float64(2.8501593587333846e-11), np.float64(2.7299032287448063e-11), np.float64(2.7365624964188995e-11), np.float64(2.8694661465104778e-11), np.float64(3.12917946281197e-11), np.float64(3.5050127174436914e-11), np.float64(3.942662621652959e-11), np.float64(4.283148025671831e-11), np.float64(4.271301722237923e-11)]
P_B_mmg_3h_vals= [np.float64(-0.0332743131320795), np.float64(-0.03073037399243411), np.float64(-0.028367320460419645), np.float64(-0.02617223552434486), np.float64(-0.024133257814174146), np.float64(-0.022239447307240347), np.float64(-0.020480584275786837), np.float64(-0.01884710102806506), np.float64(-0.017330205191140913), np.float64(-0.01592189398998341), np.float64(-0.014614682755793317), np.float64(-0.01340159398710728), np.float64(-0.012276111828088961), np.float64(-0.01123230019801929), np.float64(-0.01026468462796562), np.float64(-0.009368121589788992), np.float64(-0.008537757498060081), np.float64(-0.007769248289024191), np.float64(-0.0070584532253501805), np.float64(-0.006401601232466224), np.float64(-0.005795087083122605), np.float64(-0.005235552209298422), np.float64(-0.004719899792781513), np.float64(-0.004245279550976186), np.float64(-0.0038089718200877394), np.float64(-0.003408425219758998), np.float64(-0.003041245781214197), np.float64(-0.0027052662600641555), np.float64(-0.0023983635819867376), np.float64(-0.0021184899874485065), np.float64(-0.0018638946337036525), np.float64(-0.0016328125635026779), np.float64(-0.0014237427338102415), np.float64(-0.0012351719024712062), np.float64(-0.0010657181285182694), np.float64(-0.0009140281740637999), np.float64(-0.0007789301643895355), np.float64(-0.0006592633584373812), np.float64(-0.0005539650071322852), np.float64(-0.0004619883193861345), np.float64(-0.0003823289760935377), np.float64(-0.0003139976003813819), np.float64(-0.0002558665157893043), np.float64(-0.00020670368958412586), np.float64(-0.00016570616357409513), np.float64(-0.00013207916086082193), np.float64(-0.00010500524200139675), np.float64(-8.357013202698842e-05), np.float64(-6.674473597088792e-05), np.float64(-5.352803460025346e-05), np.float64(-4.305477678718675e-05), np.float64(-3.470015802158626e-05), np.float64(-2.7852666373907538e-05), np.float64(-2.2124220485251808e-05), np.float64(-1.7380916584761262e-05), np.float64(-1.3602054246032768e-05), np.float64(-1.0508046841440947e-05), np.float64(-7.406552526340271e-06), np.float64(-4.648212699884175e-06), np.float64(-2.9353673269335084e-06), np.float64(-2.0726193920821494e-06), np.float64(-1.5992204607046905e-06), np.float64(-1.1748527299262993e-06), np.float64(-6.752221772463667e-07), np.float64(-1.860252038992093e-07), np.float64(1.6977532058512535e-07), np.float64(3.661192546318469e-07), np.float64(4.591178300971116e-07), np.float64(4.931185698204058e-07), np.float64(4.5617827895822254e-07), np.float64(3.216818554841838e-07), np.float64(2.7909593072419947e-07), np.float64(3.4108745774319357e-07), np.float64(3.521419033586068e-07), np.float64(2.7811969847290926e-07), np.float64(1.899162516363286e-07), np.float64(1.615409836421881e-07), np.float64(1.254089116995046e-07), np.float64(1.0999367189432712e-07), np.float64(9.83260305629189e-08), np.float64(9.479765948598054e-08), np.float64(9.281263982764991e-08), np.float64(9.552038861507842e-08), np.float64(8.876383266534067e-08), np.float64(6.388230435752046e-08), np.float64(4.919707931742635e-08), np.float64(4.930638922468702e-08), np.float64(3.457740555600165e-08), np.float64(2.32550918773806e-08), np.float64(1.5201408125095906e-08), np.float64(1.0281867701063139e-08), np.float64(7.3895356611945185e-09), np.float64(5.6882461512647485e-09), np.float64(4.702851608489616e-09), np.float64(4.190103755366263e-09), np.float64(4.024969143362818e-09), np.float64(4.087003295658263e-09), np.float64(4.103624685524515e-09), np.float64(3.326689140718264e-09), np.float64(2.457367595768984e-09), np.float64(2.1390806428278228e-09), np.float64(1.4169341915949823e-09), np.float64(8.302483732657611e-10), np.float64(4.906335121857989e-10), np.float64(3.060489598204487e-10), np.float64(2.0405855295029655e-10), np.float64(1.4618418342665707e-10), np.float64(1.1326707315353567e-10), np.float64(9.590244119685843e-11), np.float64(8.937571256655459e-11), np.float64(9.084435733099817e-11), np.float64(9.42913982655664e-11), np.float64(8.203119553088351e-11), np.float64(5.838078845136059e-11), np.float64(4.856166780169351e-11), np.float64(3.0474164907565694e-11), np.float64(1.6392147419878394e-11), np.float64(8.875459937943724e-12), np.float64(5.0872058188679095e-12), np.float64(3.126521125106932e-12), np.float64(2.068662435658883e-12), np.float64(1.4751117200744742e-12), np.float64(1.1614010759081004e-12), np.float64(1.0204069714583468e-12), np.float64(1.0077231073596059e-12), np.float64(1.058422629509094e-12), np.float64(8.808187690467533e-13), np.float64(-7.2700729267292174e-12)]
P_B_mmg_1h_vals= [np.float64(9.773578660680927e-11), np.float64(9.773578393668929e-11), np.float64(9.773578084678202e-11), np.float64(9.773577727648276e-11), np.float64(9.773577314782007e-11), np.float64(9.773576837468658e-11), np.float64(9.773576285509978e-11), np.float64(9.773575647207965e-11), np.float64(9.773574909378824e-11), np.float64(9.773574056037566e-11), np.float64(9.773573069293917e-11), np.float64(9.77357192824853e-11), np.float64(9.773570609080594e-11), np.float64(9.773569083853109e-11), np.float64(9.773567320394803e-11), np.float64(9.773565281835143e-11), np.float64(9.773562925769538e-11), np.float64(9.77356020330989e-11), np.float64(9.773557057716652e-11), np.float64(9.773553423443456e-11), np.float64(9.773549225475785e-11), np.float64(9.773544376843536e-11), np.float64(9.773538776915576e-11), np.float64(9.773532309652056e-11), np.float64(9.773524841078534e-11), np.float64(9.773516216519045e-11), np.float64(9.773506257259473e-11), np.float64(9.773494756188842e-11), np.float64(9.773481473013038e-11), np.float64(9.773466129838986e-11), np.float64(9.773448405468355e-11), np.float64(9.773427929337636e-11), np.float64(9.773404273491315e-11), np.float64(9.773376943646526e-11), np.float64(9.77334536866326e-11), np.float64(9.773308891988525e-11), np.float64(9.773266759302857e-11), np.float64(9.773218098598262e-11), np.float64(9.773161903412106e-11), np.float64(9.773097012711953e-11), np.float64(9.773022085333034e-11), np.float64(9.772935574314576e-11), np.float64(9.772835692140793e-11), np.float64(9.77272036901713e-11), np.float64(9.772587207860456e-11), np.float64(9.77243343724032e-11), np.float64(9.772255865988627e-11), np.float64(9.772050813932134e-11), np.float64(9.77181401692333e-11), np.float64(9.771540518027644e-11), np.float64(9.771224573925362e-11), np.float64(9.770859534984693e-11), np.float64(9.770437708671887e-11), np.float64(9.769950207828912e-11), np.float64(9.769386776438437e-11), np.float64(9.768735539938202e-11), np.float64(9.76798281365461e-11), np.float64(9.76711282222604e-11), np.float64(9.766107403893002e-11), np.float64(9.764945641300774e-11), np.float64(9.763603208976934e-11), np.float64(9.762051984650565e-11), np.float64(9.760259500689283e-11), np.float64(9.758188336382385e-11), np.float64(9.755795368703479e-11), np.float64(9.75303071533749e-11), np.float64(9.749836576952577e-11), np.float64(9.746146749899188e-11), np.float64(9.741884843536826e-11), np.float64(9.736962578205463e-11), np.float64(9.731277806795546e-11), np.float64(9.724713141772641e-11), np.float64(9.717133374744416e-11), np.float64(9.708383297751097e-11), np.float64(9.698284540373067e-11), np.float64(9.686632435357252e-11), np.float64(9.673193707453667e-11), np.float64(9.657702836398728e-11), np.float64(9.63985414926771e-11), np.float64(9.619297264836416e-11), np.float64(9.595634324016843e-11), np.float64(9.568414824670342e-11), np.float64(9.537129423059273e-11), np.float64(9.501204771532465e-11), np.float64(9.459994267113421e-11), np.float64(9.412770668481355e-11), np.float64(9.358728257659535e-11), np.float64(9.296974222904274e-11), np.float64(9.226531794286305e-11), np.float64(9.146334127877231e-11), np.float64(9.055233097568574e-11), np.float64(8.952009844464144e-11), np.float64(8.835385572254963e-11), np.float64(8.704038446455185e-11), np.float64(8.55663115567116e-11), np.float64(8.391844496122508e-11), np.float64(8.20842543746485e-11), np.float64(8.005241633173914e-11), np.float64(7.781321236441428e-11), np.float64(7.53592876713674e-11), np.float64(7.268619599300351e-11), np.float64(6.979287298475218e-11), np.float64(6.668274740812781e-11), np.float64(6.33639435631773e-11), np.float64(5.985008369323401e-11), np.float64(5.616090844440782e-11), np.float64(5.232303826191622e-11), np.float64(4.837040418909615e-11), np.float64(4.434405483788396e-11), np.float64(4.029134632513913e-11), np.float64(3.6264299872504e-11), np.float64(3.2316977288655135e-11), np.float64(2.850309277455315e-11), np.float64(2.487437474510688e-11), np.float64(2.1478803664978657e-11), np.float64(1.8359244084378224e-11), np.float64(1.5550691401049598e-11), np.float64(1.3077247136306234e-11), np.float64(1.0950696082927328e-11), np.float64(9.170871453844028e-12), np.float64(7.725512161025191e-12), np.float64(6.588078736041449e-12), np.float64(5.715384763457016e-12), np.float64(5.047958792583987e-12), np.float64(4.513376654945337e-12), np.float64(4.0332288859963265e-12), np.float64(3.5364402131176268e-12), np.float64(2.9803256025094216e-12)]

P_of_k_perp_T += P_T_4h_perp_vals

#%%
# Plot 3D power spectra

#%%

plt.plot(k_vals, P_of_k_perp_T, label=r'$P_{q_\perp,1} + P_{q_\perp,2}$', color='tab:red')
plt.plot(k_vals, P_of_k_perp_1, label=r'$P_{q_\perp,1}$', color='tab:blue', linestyle='--')
plt.plot(k_vals, -P_of_k_perp_2, label=r'$-P_{q_\perp,2}$', color='tab:cyan', linestyle='--')
plt.plot(k_vals, P_T_4h_perp_vals, label=r'$P_{q_\perp}^{\rm c}$', color='tab:purple', linestyle='--')
plt.xlim(1e-3, 1e1)
plt.xlabel(r'$k$', fontsize=20)
plt.ylabel(r'$P_{q_\perp}^{\pi T}(k)$', fontsize=20)
plt.loglog()
plt.legend(fontsize=12, frameon=False)
plt.tick_params(which='both', direction='in', width=1, length=3)
#plt.savefig('kSZ_power_spectrum_transverse.pdf', format="pdf", bbox_inches="tight")
plt.show()

plt.plot(k_vals, P_of_k_par_T, label=r'$P_{q_\parallel,1} + P_{q_\parallel,2}$', color='tab:red')
plt.plot(k_vals, P_of_k_par_1, label=r'$P_{q_\parallel,1}$', color='tab:blue', linestyle='--')
plt.plot(k_vals, P_of_k_par_2, label=r'$P_{q_\parallel,2}$', color='tab:cyan', linestyle='--')
#plt.plot(k_vals, P_T_1h_vals, label=r'$P_{q_\perp}^{\rm T, 1h}$', color='tab:purple', linestyle='--')
#plt.plot(k_vals, P_T_4h_vals, label=r'$P_{q_\perp}^{\rm T, 4h}$', color='tab:green', linestyle='--')
#plt.plot(k_vals, P_B_mme_1h_vals, label=r'$P_{q_\perp}^{\rm B, 1h}$', color='tab:purple', linestyle='--')
#plt.plot(k_vals, P_B_mme_3h_vals, label=r'$P_{q_\perp}^{\rm B, 3h}$', color='tab:green', linestyle='--')
#plt.plot(k_vals, P_B_mmg_1h_vals, label=r'$P_{q_\perp}^{\rm B, 1h}$', color='tab:purple', linestyle='--')
#plt.plot(k_vals, P_B_mmg_3h_vals, label=r'$P_{q_\perp}^{\rm B, 3h}$', color='tab:green', linestyle='--')
plt.xlim(1e-3, 1e1)
plt.xlabel(r'$k$', fontsize=20)
plt.ylabel(r'$P_{q_\parallel}^{\pi T}(k)$', fontsize=20)
plt.loglog()
plt.legend(fontsize=12, frameon=False)
plt.tick_params(which='both', direction='in', width=1, length=3)
#plt.savefig('kSZ_power_spectrum_longitudinal.pdf', format="pdf", bbox_inches="tight")
plt.show()

#%%
# Impact of the two-halo term

#%%

plt.plot(k_vals, pk_eg(k_vals, a), label=r'$P_{\rm eg}^{\rm 1h} + P_{\rm eg}^{\rm 2h}$', color="tab:blue")
plt.plot(k_vals, pk_eg_1h(k_vals, a), label=r'$P_{\rm eg}^{\rm 1h}$', color="tab:red")
plt.xlim(1e-3, 1e1)
plt.xlabel(r'$k$', fontsize=20)
plt.ylabel(r'$P_{\rm eg}(k)$', fontsize=20)
plt.loglog()
plt.legend(fontsize=12, frameon=False)
plt.tick_params(which='both', direction='in', width=1, length=3)
#plt.savefig('kSZ_power_spectrum_eg_two_halo_term.pdf', format="pdf", bbox_inches="tight")
plt.show()

#%%
# Impact of satellite galaxies

#%%

def N_c(M, M_min):
    '''
    Returns the mean number of central galaxies

    '''
    sig_lnM = 0.4
    return 0.5 * (1 + erf((np.log10(M / M_min)) / sig_lnM))


def N_s(M, M_0, M_1, alpha=1.0):
    '''
    Returns the mean number of satellite galaxies
    
    '''
    return np.heaviside(M - M_0, 0) * ((M - M_0) / M_1)**(alpha)


def mean_halo_mass(M, nM, N_c, N_s):
    '''
    Returns the mean halo mass
    
    '''
    log10_M = np.log10(M)
    N_g = N_c + N_s
    integrand_1 = M * nM * N_g
    integrand_2 = nM * N_g
    return np.trapz(integrand_1, log10_M) / np.trapz(integrand_2, log10_M)
    
#%%

# Central galaxy only calculation
n_M = nM(cosmo, M, a)
M0_cen = 1e15
M1_cen = 1e13
M_min_cen = 3.14e12 # value of M_min_cen at which M_mean = 1e13
N_cen_1 = N_c(M, M_min_cen)
N_sat_1 = N_s(M, M0_cen, M1_cen)
M_mean_cen = mean_halo_mass(M, n_M, N_cen_1, N_sat_1)
print(f"{M_mean_cen:.2e}")

# Central and satellites calculation
M0_sat = 1e11
M1_sat = 3e12
M_min_sat = 1.59e11 # value of M_min_sat at which M_mean = 1e13
N_cen_2 = N_c(M, M_min_sat)
N_sat_2 = N_s(M, M0_sat, M1_sat)
M_mean_sat = mean_halo_mass(M, n_M, N_cen_2, N_sat_2)
print(f"{M_mean_sat:.2e}")

# HOD halo profiles
pg_cen = ccl.halos.HaloProfileHOD(mass_def=hmd_200m, concentration=cM, log10Mmin_0=np.log10(M_min_cen), log10M0_0=np.log10(M0_cen), log10M1_0=np.log10(M1_cen), alpha_0=1.2)
pg_sat = ccl.halos.HaloProfileHOD(mass_def=hmd_200m, concentration=cM, log10Mmin_0=np.log10(M_min_sat), log10M0_0=np.log10(M0_sat), log10M1_0=np.log10(M1_sat), alpha_0=1.2)

#%%

# Electron-galaxy power spectrum with central galaxy only
pk_eg_cen = ccl.halos.halomod_Pk2D(cosmo, hmc, pGas, prof2=pg_cen, lk_arr=lk_arr, a_arr=a_arr)

# Electron-galaxy power spectrum with central and satellite galaxies
pk_eg_sat = ccl.halos.halomod_Pk2D(cosmo, hmc, pGas, prof2=pg_sat, lk_arr=lk_arr, a_arr=a_arr)

#%%

plt.plot(k_vals, pk_eg_cen(k_vals, a), label=r'$P_{\rm eg}$ with central only', color="tab:red")
plt.plot(k_vals, pk_eg_sat(k_vals, a), label=r'$P_{\rm eg}$ with central + satellites', color="tab:blue")
plt.xlim(1e-3, 1e1)
plt.xlabel(r'$k$', fontsize=20)
plt.ylabel(r'$P_{\rm eg}(k)$', fontsize=20)
plt.loglog()
plt.legend(fontsize=12, frameon=False, loc='lower left')
plt.tick_params(which='both', direction='in', width=1, length=3)
#plt.savefig('kSZ_satellite_galaxies.pdf', format="pdf", bbox_inches="tight")
plt.show()
